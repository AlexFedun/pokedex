{"version":3,"sources":["components/Types.js","components/Pokeinfo.js","components/Pokemon.js","components/TypeModal.js","components/Pokelist.js","components/App.js","index.js"],"names":["Types","color","this","props","name","Badge","variant","style","background","className","Component","Pokeinfo","capitalize","s","charAt","toUpperCase","slice","item","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Container","Row","Col","xs","md","Image","src","sprites","front_default","thumbnail","imageRendering","width","Table","responsive","height","weight","base_experience","types","map","index","type","key","abilities","ability","ProgressBar","animated","now","stats","base_stat","label","max","Footer","Button","onClick","onHide","Pokemon","state","error","isLoaded","items","modalShow","fetch","url","then","res","json","result","setState","message","Card","Img","show","TypeModal","selected","formChange","event","inputs","currentTarget","elements","forEach","element","checked","push","Form","onChange","Check","setType","Pokelist","offset","limit","search","typesModal","slectedTypes","fetchData","link","st","results","pokemon","previousPage","nestPage","pageLimit","manageItems","filter","includes","newItems","maxValue","length","handleChange","input","target","value","handleFormSubmit","preventDefault","managedItems","Navbar","bg","fixed","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","ToggleButtonGroup","val","defaultValue","ToggleButton","ButtonGroup","disabled","inline","onSubmit","FormControl","placeholder","CardColumns","Spinner","animation","role","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c6e5010.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { Badge } from 'react-bootstrap';\r\n\r\nclass Types extends Component {\r\n\r\n    render() {\r\n        let color;\r\n        switch (this.props.name) {\r\n            case \"normal\":\r\n                color = \"#A8A878\";\r\n                break;\r\n            case \"fighting\":\r\n                color = \"#C03028\";\r\n                break;\r\n            case \"flying\":\r\n                color = \"#A890F0\";\r\n                break;\r\n            case \"poison\":\r\n                color = \"#A040A0\";\r\n                break;\r\n            case \"ground\":\r\n                color = \"#E0C068\";\r\n                break;\r\n            case \"rock\":\r\n                color = \"#B8A038\";\r\n                break;\r\n            case \"bug\":\r\n                color = \"#A8B820\";\r\n                break;\r\n            case \"ghost\":\r\n                color = \"#705898\";\r\n                break;\r\n            case \"steel\":\r\n                color = \"#B8B8D0\";\r\n                break;\r\n            case \"fire\":\r\n                color = \"#F08030\";\r\n                break;\r\n            case \"water\":\r\n                color = \"#6890F0\";\r\n                break;\r\n            case \"grass\":\r\n                color = \"#78C850\";\r\n                break;\r\n            case \"electric\":\r\n                color = \"#F8D030\";\r\n                break;\r\n            case \"psychic\":\r\n                color = \"#F85888\";\r\n                break;\r\n            case \"ice\":\r\n                color = \"#98D8D8\";\r\n                break;\r\n            case \"dragon\":\r\n                color = \"#7038F8\";\r\n                break;\r\n            case \"dark\":\r\n                color = \"#705848\";\r\n                break;\r\n            case \"fairy\":\r\n                color = \"#F0B6BC\";\r\n                break;\r\n            case \"shadow\":\r\n                color = \"#705898\";\r\n                break;\r\n            case \"unknown\":\r\n                color = \"#6AA596\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return <Badge variant=\"primary\" style={{background: color}} className=\"mr-1\">{this.props.name}</Badge>;\r\n    };\r\n}\r\nexport default Types","import React, {Component} from 'react'\r\nimport { Modal, Button, Container, Row, Col, Image, Table, ProgressBar} from 'react-bootstrap';\r\nimport Types from './Types';\r\n\r\nclass Pokeinfo extends Component {\r\n\r\n    capitalize = (s) => {\r\n        if (typeof s !== 'string') return ''\r\n        return s.charAt(0).toUpperCase() + s.slice(1)\r\n    }\r\n    \r\n    render() {\r\n        const { item } = this.props;\r\n        return (\r\n            <Modal {...this.props} size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\" centered >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                {this.capitalize(item.name) + \" #\" + item.id}\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Container>\r\n                <Row>\r\n                    <Col xs={12} md={5}>\r\n                        <Image src={item.sprites.front_default} thumbnail style={{imageRendering: \"pixelated\", width: \"100%\"}}/>\r\n                    </Col>\r\n                    <Col xs={12} md={7}>\r\n                        <Table responsive>\r\n                            <tbody>\r\n                            <tr>\r\n                                <td>Height</td>\r\n                                <td>{item.height}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Weight</td>\r\n                                <td>{item.weight}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Base experience</td>\r\n                                <td>{item.base_experience}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Types</td>\r\n                                <td>\r\n                                {\r\n                                    item.types.map( (item, index) => (\r\n                                    <Types name={item.type.name} key={index}/>\r\n                                    ))\r\n                                }\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Abilities</td>\r\n                                <td>\r\n                                {\r\n                                    item.abilities.map( (item, index) => (\r\n                                        <div key={index}>{this.capitalize(item.ability.name)}</div>\r\n                                    ))\r\n                                }\r\n                                </td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>                    \r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <Table responsive>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td style={{width: \"150px\"}}>HP</td>\r\n                                <td>\r\n                                    <ProgressBar animated now={item.stats[5].base_stat}\r\n                                    variant=\"info\" label={item.stats[5].base_stat} max=\"200\"/>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Attack</td>\r\n                                <td >\r\n                                    <ProgressBar animated now={item.stats[4].base_stat}\r\n                                    variant=\"info\" label={item.stats[4].base_stat} max=\"200\"/>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Defense</td>\r\n                                <td >\r\n                                    <ProgressBar animated now={item.stats[3].base_stat}\r\n                                    variant=\"info\" label={item.stats[3].base_stat} max=\"200\"/>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Special Attack</td>\r\n                                <td >\r\n                                    <ProgressBar animated now={item.stats[2].base_stat}\r\n                                    variant=\"info\" label={item.stats[2].base_stat} max=\"200\"/>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Special Defense</td>\r\n                                <td >\r\n                                    <ProgressBar animated now={item.stats[1].base_stat}\r\n                                    variant=\"info\" label={item.stats[1].base_stat} max=\"200\"/>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Speed</td>\r\n                                <td>\r\n                                    <ProgressBar animated now={item.stats[0].base_stat}\r\n                                    variant=\"info\" label={item.stats[0].base_stat} max=\"200\"/>\r\n                                </td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={this.props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\nexport default Pokeinfo","import React, {Component} from 'react'\r\nimport { Card } from 'react-bootstrap';\r\nimport Types from './Types';\r\nimport Pokeinfo from './Pokeinfo';\r\n\r\nclass Pokemon extends Component {\r\n  state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      items: [],\r\n      modalShow: false\r\n  };\r\n\r\n  componentDidMount() {\r\n      fetch(this.props.url)\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              items: result\r\n            });\r\n          },\r\n          (error) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              error\r\n            });\r\n          }\r\n        )\r\n    }\r\n\r\n    capitalize = (s) => {\r\n      if (typeof s !== 'string') return ''\r\n      return s.charAt(0).toUpperCase() + s.slice(1)\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, items } = this.state;\r\n        let modalClose = () => this.setState({ modalShow: false });\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            return (\r\n              <div>\r\n                <Card onClick={() => this.setState({modalShow: true})}>\r\n                  <Card.Header>\r\n                    <h5>\r\n                      {this.capitalize(items.name)}\r\n                      <small> #{items.id}</small>\r\n                    </h5>\r\n                  </Card.Header>\r\n                  <Card.Img variant=\"top\" src={items.sprites.front_default} style={{imageRendering: \"pixelated\"}}/>\r\n                  <Card.Footer>\r\n                      {\r\n                        items.types.map( (item, index) => (\r\n                          <Types name={item.type.name} key={index}/>\r\n                        ))\r\n                      }\r\n                  </Card.Footer>\r\n                </Card>\r\n              <Pokeinfo show={this.state.modalShow} onHide={modalClose} item={items}/>\r\n              </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Pokemon","import React, {Component} from 'react';\r\nimport { Modal, Row, Container, Col, Button, Form } from 'react-bootstrap';\r\n\r\nclass TypeModal extends Component {\r\n    state = {\r\n        selected: null\r\n    }\r\n\r\n    formChange = (event) => {\r\n        let inputs = event.currentTarget.elements;\r\n        let res = [];\r\n        [...inputs].forEach(function(element) {\r\n            if (element.checked) {\r\n                res.push(element.id);\r\n            }\r\n        });\r\n        this.setState({selected:res})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal {...{show:this.props.show, onHide:this.props.onHide}} aria-labelledby=\"contained-modal-title-vcenter\" centered >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Selected types\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Container>\r\n                    <Form onChange={this.formChange}>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Check type=\"radio\" id=\"normal\" label=\"Normal\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"fighting\" label=\"Fighting\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"flying\" label=\"Flying\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"poison\" label=\"Poison\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"ground\" label=\"Ground\" name=\"type\" />\r\n                                <Form.Check type=\"radio\" id=\"rock\" label=\"Rock\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"bug\" label=\"Bug\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"ghost\" label=\"Ghost\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"steel\" label=\"Steel\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"fire\" label=\"Fire\" name=\"type\"/>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Check type=\"radio\" id=\"water\" label=\"Water\" name=\"type\" />\r\n                                <Form.Check type=\"radio\" id=\"grass\" label=\"Grass\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"electric\" label=\"Electric\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"psychic\" label=\"Psychic\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"ice\" label=\"Ice\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"dragon\" label=\"Dragon\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"dark\" label=\"Dark\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"fairy\" label=\"Fairy\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"shadow\" label=\"Shadow\" name=\"type\"/>\r\n                                <Form.Check type=\"radio\" id=\"unknown\" label=\"Unknown\" name=\"type\"/>\r\n                            </Col>\r\n                        </Row>\r\n                        </Form>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => this.props.setType(this.state.selected)}>Close</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TypeModal","import React, {Component} from 'react'\r\nimport { CardColumns, Col, ButtonGroup, Button,\r\n   Spinner, Navbar, Nav, Form, FormControl,\r\n   ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Pokemon from './Pokemon'\r\nimport TypeModal from './TypeModal'\r\n\r\nclass Pokelist extends Component {\r\n    state = {\r\n        offset: 0,\r\n        limit: 10,\r\n        error: null,\r\n        isLoaded: false,\r\n        items: [],\r\n        search: \"\",\r\n        typesModal: false,\r\n        slectedTypes: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchData()\r\n      }\r\n\r\n    fetchData = () => {\r\n      let link = \"https://pokeapi.co/api/v2/pokemon/?offset=&limit=1000\";\r\n      let st = 0;\r\n      if (this.state.slectedTypes != null) {\r\n        link = \"https://pokeapi.co/api/v2/type/\" + this.state.slectedTypes[0];\r\n        st = 1;\r\n      } \r\n      fetch(link)\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              items: st === 0 ? result.results : result.pokemon\r\n            });\r\n          },\r\n          (error) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              error\r\n            });\r\n          }\r\n        )\r\n    }\r\n  \r\n    previousPage = () => {\r\n      this.setState({ offset: this.state.offset - this.state.limit });\r\n    }\r\n\r\n    nestPage = () => {\r\n      this.setState({ offset: this.state.offset + this.state.limit });  \r\n    }\r\n\r\n    pageLimit = (limit) => {\r\n      this.setState(\r\n        {\r\n          offset: 0,\r\n          limit: limit\r\n        });  \r\n    }\r\n    manageItems = (items) => {\r\n      let search = this.state.search === \"\"? items : items.filter(item =>\r\n        this.state.slectedTypes == null ? item.name.includes(this.state.search):item.pokemon?.name.includes(this.state.search) );\r\n      let newItems = search.slice(this.state.offset,this.state.offset + this.state.limit);\r\n      newItems.maxValue = search.length;\r\n      return newItems;\r\n    }\r\n    handleChange = (event) => {\r\n      const input = event.target;\r\n      this.setState({ [input.name]: input.value });\r\n    };\r\n    handleFormSubmit = (event) => {\r\n      event.preventDefault();\r\n    }\r\n   \r\n    render() {\r\n        const { error, isLoaded, items } = this.state;\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return (\r\n              <Spinner animation=\"border\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n              </Spinner>\r\n            );\r\n        } else {\r\n          let managedItems = this.manageItems(items);\r\n          const handleChange = val => this.pageLimit(val);\r\n            return (\r\n                <Col>\r\n                  <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\" expand=\"lg\">\r\n                    <Navbar.Brand href=\"#\">Pokedex</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                      <Nav className=\"mr-auto\">\r\n                        <ToggleButtonGroup type=\"radio\" onChange={handleChange} name=\"option\" defaultValue={10}>\r\n                          <ToggleButton value={10}>10</ToggleButton>\r\n                          <ToggleButton value={20}>20</ToggleButton>\r\n                          <ToggleButton value={50}>50</ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                        <ButtonGroup className=\"ml-3\">\r\n                        <Button variant=\"primary\" disabled> Page: {this.state.offset / this.state.limit + 1} </Button>\r\n                        {this.state.offset !== 0? <Button variant=\"primary\" onClick={this.previousPage}>Previous page</Button>:\"\"}\r\n                        {this.state.offset + this.state.limit < managedItems.maxValue? <Button variant=\"primary\" onClick={this.nestPage}>Next page</Button>:\"\"}\r\n                      </ButtonGroup>\r\n                      </Nav>\r\n                      <Form inline onSubmit={this.handleFormSubmit}>\r\n                      <Button variant=\"primary mr-2\" onClick={() => this.setState({typesModal: true})}> Types </Button>\r\n                        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" name=\"search\" value={this.state.search} onChange={this.handleChange}/>\r\n                      </Form>\r\n                    </Navbar.Collapse>\r\n                  </Navbar>\r\n\r\n                  <TypeModal show={this.state.typesModal} onHide={() => this.setState({typesModal: false})}\r\n                   setType={\r\n                      (types) => this.setState({slectedTypes: types},\r\n                        () => this.setState({typesModal: false},\r\n                          this.fetchData)\r\n                        )\r\n                    }/>\r\n\r\n                  <CardColumns className=\"mt-6\">\r\n                  {managedItems.map(item => (\r\n                      <Pokemon url={this.state.slectedTypes == null ? item.url : item.pokemon?.url}\r\n                        key={(this.state.slectedTypes == null ? item.name : item.pokemon?.name)}\r\n                      />\r\n                  ))}\r\n                  </CardColumns>\r\n                </Col>\r\n            );\r\n        }\r\n    }\r\n }\r\nexport default Pokelist","import React from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport Pokelist from './Pokelist'\n\nfunction App() {\n  return (\n    <Container>\n      <Row>\n        <Pokelist />\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport {render} from 'react-dom'\nimport App from './components/App'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.css'\n\nrender(<App/>, document.getElementById('root'))"],"sourceRoot":""}